{"version":3,"sources":["components/Col/index.js","components/Row/index.js","components/Alert/index.js","components/Score/index.js","components/Navbar/index.js","components/Jumbotron/index.js","components/Container/index.js","components/Footer/index.js","components/Card/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Col","props","size","split","map","join","className","Row","fluid","Alert","message","Score","score","topScore","Navbar","href","state","alertMessage","pickedChars","length","Jumbotron","Container","Footer","style","marginLeft","fontSize","src","alt","height","Card","key","id","data-id","name","onClick","backgroundImage","image","Wrapper","App","characters","shuffleCards","setState","shuffleArray","arr","i","j","Math","floor","random","event","target","attributes","getNamedItem","value","checkGuess","updateTopScore","cb","newState","includes","push","checkWin","this","char","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72e8c73a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Col(props) {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n\r\n  return <div className={size} {...props} />;\r\n}\r\n\r\nexport default Col;\r\n","import React from \"react\";\r\n\r\nfunction Row(props) {\r\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Alert(props) {\r\n\tif (props.message) {\r\n\t\treturn <span className='navbar-brand'>{props.message}</span>;\r\n\t} else {\r\n\t\treturn <span className='navbar-brand'>Click an image to begin!</span>;\r\n\t}\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Score(props) {\r\n\treturn (\r\n\t\t<span className='navbar-brand'>\r\n\t\t\tScore: {props.score} | Top Score: {props.topScore}\r\n\t\t</span>\r\n\t);\r\n}\r\n\r\nexport default Score;\r\n","import React from 'react';\r\nimport './style.css';\r\nimport Col from '../Col';\r\nimport Row from '../Row';\r\nimport Alert from '../Alert';\r\nimport Score from '../Score';\r\n\r\nfunction Navbar(props) {\r\n\treturn (\r\n\t\t<nav className='navbar navbar-expand-lg navbar-dark bg-success'>\r\n\t\t\t<Col size='md-4'>\r\n\t\t\t\t<a className='navbar-brand' href='/'>\r\n\t\t\t\t\tClicky Game\r\n\t\t\t\t</a>\r\n\t\t\t</Col>\r\n\t\t\t<Col size='md-4'>\r\n\t\t\t\t<Alert message={props.state.alertMessage} />\r\n\t\t\t</Col>\r\n\t\t\t<Col size='md-4'>\r\n\t\t\t\t<Score\r\n\t\t\t\t\tscore={props.state.pickedChars.length}\r\n\t\t\t\t\ttopScore={props.state.topScore}\r\n\t\t\t\t/>\r\n\t\t\t</Col>\r\n\t\t</nav>\r\n\t);\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './style.css';\r\nimport Col from '../Col';\r\nimport Row from '../Row';\r\n\r\nfunction Jumbotron() {\r\n\treturn (\r\n\t\t<div className='jumbotron jumbotron-fluid'>\r\n\t\t\t<div className='container'>\r\n\t\t\t\t<h1 className='display-4'>Clicky Game!</h1>\r\n\t\t\t\t<p className='lead'>\r\n\t\t\t\t\tClick on an character that you haven't clicked on already to earn\r\n\t\t\t\t\tpoints!\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Container(props) {\r\n\treturn (\r\n\t\t<div className={`container${props.fluid ? '-fluid' : ''}`} {...props} />\r\n\t);\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Col from \"../Col\";\r\nimport Row from \"../Row\";\r\nimport Container from \"../Container\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <span style={{marginLeft: 20, fontSize: 20}}>Clicky Game!\r\n            <img src=\"./logo512.png\" alt=\"Test\" height=\"30\" />\r\n            </span>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './style.css';\r\nimport Col from '../Col';\r\nimport Row from '../Row';\r\nimport Container from '../Container';\r\n\r\nfunction Card(props) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='card'\r\n\t\t\tkey={props.id}\r\n\t\t\tdata-id={props.id}\r\n\t\t\tname={props.name}\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tstyle={{ backgroundImage: `url(${props.image})` }}\r\n\t\t></div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Col from \"../Col\";\r\nimport Row from \"../Row\";\r\nimport Container from \"../Container\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport Navbar from './components/Navbar';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Footer from './components/Footer';\nimport Card from './components/Card';\nimport Wrapper from './components/Wrapper';\nimport Container from './components/Container';\nimport Row from './components/Row';\nimport Col from './components/Col';\nimport characters from './characters.json';\n\nclass App extends Component {\n\tstate = {\n\t\tcharacters: characters,\n\t\tpickedChars: [],\n\t\ttopScore: 0,\n\t\talertMessage: ''\n\t};\n\n\tshuffleCards = () => {\n\t\tthis.setState(\n\t\t\t(this.state.characters = this.shuffleArray(this.state.characters))\n\t\t);\n\t};\n\n\tshuffleArray = arr => {\n\t\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\t\tlet j = Math.floor(Math.random() * (i + 1));\n\t\t\t[arr[i], arr[j]] = [arr[j], arr[i]];\n\t\t}\n\t\treturn arr;\n\t};\n\n\tonClick = event => {\n\t\tconst name = event.target.attributes.getNamedItem('name').value;\n\t\tthis.shuffleCards();\n\t\tthis.checkGuess(name, this.updateTopScore);\n\t};\n\n\tcheckGuess = (name, cb) => {\n\t\tconst newState = { ...this.state };\n\t\tif (newState.pickedChars.includes(name)) {\n\t\t\tnewState.alertMessage = `You already picked ${name} :( Try again!`;\n\t\t\tnewState.pickedChars = [];\n\t\t\tthis.setState((this.state = newState));\n\t\t} else {\n\t\t\tnewState.pickedChars.push(name);\n\t\t\tnewState.alertMessage = 'Nice! :)';\n\t\t\tthis.setState((this.state = newState));\n\t\t}\n\t\tcb(newState, this.checkWin);\n\t};\n\n\tupdateTopScore = (newState, cb) => {\n\t\tif (newState.pickedChars.length > newState.topScore) {\n\t\t\tnewState.topScore++;\n\t\t\tthis.setState((this.state = newState));\n\t\t}\n\t\tcb(newState);\n\t};\n\n\tcheckWin = newState => {\n\t\tif (newState.pickedChars.length === 12) {\n\t\t\tnewState.alertMessage = 'You won!!! Great job! :D';\n\t\t\tnewState.pickedChars = [];\n\t\t\tthis.setState((this.state = newState));\n\t\t}\n\t};\n\n\t// render() {\n\t// \treturn (\n\t// \t\t<div>\n\t// \t\t\t<Navbar state={this.state} />\n\t// \t\t\t<Jumbotron />\n\t// \t\t\t<Wrapper>\n\t// \t\t\t\t{this.state.characters.map(char => (\n\t// \t\t\t\t\t<Card\n\t// \t\t\t\t\t\tid={char.id}\n\t// \t\t\t\t\t\tname={char.name}\n\t// \t\t\t\t\t\timage={char.image}\n\t// \t\t\t\t\t\tkey={char.id}\n\t// \t\t\t\t\t\tonClick={this.onClick}\n\t// \t\t\t\t\t/>\n\t// \t\t\t\t))}\n\t// \t\t\t</Wrapper>\n\t// \t\t\t<Footer />\n\t// \t\t</div>\n\t// \t);\n\t// }\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar state={this.state} />\n\t\t\t\t<Jumbotron />\n\t\t\t\t<Container>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{this.state.characters.map(char => (\n\t\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\t\tid={char.id}\n\t\t\t\t\t\t\t\tname={char.name}\n\t\t\t\t\t\t\t\timage={char.image}\n\t\t\t\t\t\t\t\tkey={char.id}\n\t\t\t\t\t\t\t\tonClick={this.onClick}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}